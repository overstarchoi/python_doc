pythonGuide

문자열 포매팅
숫자 대입
>>> 'I eat %d apples.' %3
'I eat 3 apples.'

문자열 대입
>>> 'I eat %s apples.' %'five'
'I eat five apples.'

숫자 변수 대입
>>> number = 3
>>> 'I eat %d apples.' %number
'I eat 3 apples.'

2개 이상 값 넣기
>>> number = 3
>>> day = 'three'
>>> 'I ate %d apples. so I was sick for %s days.' %(number,day)
'I ate 3 apples. so I was sick for three days.'

포맷 코드
>>> '%10s' %'hi'
'        hi' # 총 10칸에서 오른쪽 정렬

>>> '%-10sjane' %'hi'
'hi        jane' # 총 10칸에서 왼쪽 정렬, 그 후 다음 문자 'jane'

>>> '%0.4f' %3.42134234
'3.4213' # 소수점 4자리까지 표현. 이때 반올림.

>>> '%.4f' %3.42134234
'3.4213' # 0은 생략할 수 있다.

>>> '%10.4f' %3.42134234
'    3.4213' # 총 10칸에서 오른쪽 정렬.

format 함수를 사용한 포매팅
숫자 바로 대입하기
>>> 'I eat {0} apples.'.format(3)
'I eat 3 apples.'

문자열 바로 대입하기
>>> 'I eat {0} apples.'.format('five')
'I eat five apples.'

숫자 변수 대입하기
>>> number = 3
>>> 'I eat {0} apples.'.format(number)
'I eat 3 apples.'

2개 이상 값 넣기
>>> number = 10
>>> day = 'three'
>>> 'I ate {0} apples. so I was sick for {1} days.'.format(number,day)
'I ate 3 apples. so I was sick for three days.'

이름으로 넣기
>>> 'I ate {number} apples. so I was sick for {day} days.'.format(number=10,day=3)
'I ate 10 apples. so I was sick for 3 days.'

인덱스와 이름 혼용해서 넣기
>>> 'I ate {0} apples. so I was sick for {day} days.'.format(10,day='three')
'I ate 10 apples. so I was sick for three days.'

왼쪽 정렬
>>> '{0:<10}'.format('hi') # 0:인덱스는 0, <:왼쪽정렬, 10:총10칸.
'hi        ' # 총 10칸에서 왼쪽 정렬

오른쪽 정렬
>>> '{0:>10}'.format('hi') # >:오른쪽 정렬.
'        hi' # 총 10칸에서 오른쪽 정렬

가운데 정렬
>>> '{0:^10}'.format('hi') # ^:가운데 정렬.
'    hi    ' # 총 10칸에서 가운데 정렬

공백 채우기
>>> '{0:=<10}'.format('hi')
'hi========' # 총 10칸에서 왼쪽 정렬. 나머지는 = 로 채움.
>>> '{0:=^10}'.format('hi')
'====hi====' # 총 10칸에서 가운데 정렬. 나머지는 = 로 채움.
>>> '{0:!>10}'.format('hi')
'!!!!!!!!hi' # 총 10칸에서 오른쪽 정렬. 나머지는 ! 로 채움.

소수점 표현하기
>>> y = 3.42134234
>>> '{0:0.4f}'.format(y)
'3.4213'
>>> '{0:10.4f}'.format(y)
'    3.4213' # 총 10칸에서 오른쪽 정렬.

중괄호('{','}') 문자 표현하기
# 다음과 같이 중괄호를 두번 연속 사용하면 된다.
>>> '{{and}}'.format()
'{and}'

f 문자열 포매팅
# 파이썬 3.6 버전부터 사용 가능. 3.6 미만에서는 사용할 수 없음.
# 그러니 왠만하면 사용하지 말자.
>>> name = '홍길동'
>>> age = 30
>>> f'나의 이름은 {name}입니다. 나이는 {age}입니다.'
'나의 이름은 홍길동입니다. 나이는 30입니다.'
>>> f'나는 내년이면 {age+1}살이 된다.'
'나는 내년이면 31살이 된다.'
>>> d = {'name':'홍길동','age':30}
>>> f'나의 이름은 {d['name']}입니다. 나이는 {d['age']}입니다.'
'나의 이름은 홍길동입니다. 나이는 30입니다.'
# 귀찮다. 위에 다른것들이랑 비슷하다.

문자열 내장 함수
문자 개수 세기 - count
>>> a = 'hobby'
>>> a.count('b') #문자열 중 문자 'b'의 개수를 반환한다.
2

위치 알려주기 - find
>>> a = 'Python is the best choice'
>>> a.find('b')
14
# 문자열에서 'b'가 처음 나온 위치. 'b'가 여러개 있어도 첫번째 위치만 반환.
# find()인 경우 해당 문자가 없으면 -1을 반환.

위치 알려주기 - index
>>> a = 'Life is too short'
>>> a.index('L')
0
# find()와 동일. 다른 점은 index() 경우 해당 문자가 없으면 오류가 발생한다.

문자열 삽입 - join
>>> ','.join('abcd')
'a,b,c,d'
>>> ','.join(['a','b','c','d'])
'a,b,c,d'
>>> ''.join(['a','b','c','d'])
'abcd'

소문자를 대문자로 변환 - upper
>>> a = 'hi'
>>> a.upper()
'HI'

대문자를 소문자로 변환 - lower
>>> a = 'HI'
>>> a.lower()
'hi'

왼쪽 공백 지우기 - lstrip
>>> a = ' hi '
>>> a.lstrip()
'hi '

오른쪽 공백 지우기 - rstrip
>>> a = ' hi '
>>> a.rstrip()
' hi'

양쪽 공백 지우기 - strip
>>> a = ' hi '
>>> a.strip()
'hi'

문자열 바꾸기 - replace
>>> a = 'Life is too short'
>>> a.replace('Life','Your leg')
'Your leg is too short'

문자열 나누기 - split
>>> a = 'Life is too short'
>>> a.split() # 아무 문자도 없으면 공백,탭,엔터로 구분한다.
['Life', 'is', 'too', 'short']
>>> b = 'a:b:c:d'
>>> b.split(':')
['a','b','c','d']


리스트
>>> a = [1,2,3]
>>> a[0]
1
>>> a[0] + a[2]
4
>>> a[-1]
3

>>> b = ['1','2','3']
>>> b[0]
'1'
>>> b[0] + b[2]
'13'
>>> b[-1]
'3'

>>> a = [1,2,3]
>>> b = [4,5,6]
>>> c = a + b
>>> c
[1,2,3,4,5,6]
>>> c[0:2]
[1,2]

>>> a = [1,2,3,4,5]
>>> b = a[:2]
>>> c = a[2:]
>>> b
[1,2]
>>> c
[3,4,5]

리스트 더하기
>>> a = [1,2,3]
>>> b = [4,5,6]
>>> a + b
[1,2,3,4,5,6]

리스트 반복하기
>>> a = [1,2,3]
>>> a * 3
[1,2,3,1,2,3,1,2,3]

리스트 길이 구하기
>>> a = [1,2,3]
>>> len(a)
3

리스트값 수정하기
>>> a = [1,2,3]
>>> a[2] = 4
>>> a
[1,2,4]

리스트 요소 삭제하기
>>> a = [1,2,3]
>>> del a[1] # a[3]과 같이 해당 인덱스가 없으면 오류발생.
>>> a
[1,3]

>>> a = [1,2,3,4,5]
>>> del a[2:]
>>> a
[1,2]

>>> a = [1,2,3,4,3]
>>> a.remove(3) # 첫번째 요소값 3만 삭제. 해당 값을 가지는 요소가 없으면 에러.
>>> a
[1,2,4,3]
>>> a.remove(3)
>>> a
[1,2,4]

리스트에 요소 추가
>>> a = [1,2,3]
>>> a.append(4)
>>> a
[1,2,3,4]
# 이건 그냥 더하기하고 동일하다. 복수를 붙일수 있으므로 더하기가 더 낫다.
>>> a = [1,2,3]
>>> a += [4]
>>> a
[1,2,3,4]
>>> a += [5,6]
>>> a
[1,2,3,4,5,6]

리스트 정렬
>>> a = [1,4,3,2]
>>> a.sort()
>>> a
[1,2,3,4]
>>> a = ['a','c','b']
>>> a.sort()
>>> a
['a','b','c']

리스트 뒤집기
>>> a = ['a','c','b']
>>> a.reverse()
>>> a
['b','c','a'] # 역순으로 정렬하는게 아니라 단순히 뒤집는 것이다.

위치 반환
>>> a = [1,2,3,4,3]
>>> a.index(3) 	# 처음 나오는 값 3의 위치를 반환한다.
2 				# 리스트에 해당 값이 없다면 오류.

리스트에 요소 삽입
>>> a = [1,2,3]
>>> a.insert(0,4)	# a[0]에 4 삽입.
>>> a
[4,1,2,3]
>>> a.insert(3,5)	# a[3]에 5 삽입.
>>> a
[4,1,2,5,3]

리스트 요소 끄집어 내기
>>> a = [1,2,3]
>>> a.pop()	# 맨 마지막 요소값을 반환하고 삭제.
3
>>> a
[1,2]

>>> a = [1,2,3]
>>> a.pop(1)	# a[1] 요소를 반환하고 삭제.
>>> a
[1,3]

리스트에 포함된 요소의 개수 세기
>>> a = [1,2,3,1]
>>> a.count(1)	# 값 1을 가진 요소의 개수를 반환.
2

리스트 확장
>>> a = [1,2,3]
>>> a.extend([4,5])
>>> a
[1,2,3,4,5]
# 그냥 더하기가 낫다.

튜플(tuple)
# 이건 생략

딕셔너리
>>> dic = {'name':'pey','phone':'0119993333','birth':'1118'}
>>> a = {1:'hi'}
>>> a = {'a':[1,2,3]}

딕셔너리 쌍 추가하기
>>> a = {1:'a'}
>>> a[2] = 'b'	# 2가 key이고 'b'가 value이다.
>>> a
{1:'a',2:'b'}
>>> a['name'] = 'pey'
>>> a
{1:'a',2:'b','name':'pey'}
>>> a[3] = [1,2,3]
>>> a
{1:'a',2:'b','name':'pey',3:[1,2,3]}

딕셔너리 요소 삭제하기
>>> a = {1:'a',2:'b','name':'pey',3:[1,2,3]}
>>> del a[1]
>>> a
{2:'b','name':'pey',3:[1,2,3]}
>>> del a['name']
>>> a
{2:'b',3:[1,2,3]}

딕셔너리에서 key를 사용해 value 얻기
>>> grade = {'pey':10,'julliet':99}
>>> grade['pey']
10
>>> grade['julliet']
99

>>> a = {1:'a',2:'b'}
>>> a[1]
'a'
>>> a[2]
'b'

>>> a = {'a':1,'b':2}
>>> a['a']
1
>>> a['b']
2

딕셔너리 관련 함수
key 리스트 만들기
>>> a = {'name':'pey','phone':'0119993333','birth':'1118'}
>>> a.keys()
dict_keys(['name','phone','birth'])	# dict_keys는 객체.
# 사용 방법은 아래와 같다.
>>> for k in a.keys():
...    print(k)
...
name
phone
birth
# 또는 리스트로 만들수 있다.
>>> list(a.keys())
['name','phone','birth']
>>> list(a.keys())[0]
'name'

value 리스트 만들기
>>> a = {'name':'pey','phone':'0119993333','birth':'1118'}
>>> a.values()
dict_values(['pey','0119993333','1118']) # dict_values는 객체.

>>> for k in a.values():
...    print(k)
...
pey
0119993333
1118

>>> list(a.values())
['pey','0119993333','1118']
>>> list(a.values())[0]
'pey'

key, value 쌍 얻기
>>> a = {'name':'pey','phone':'0119993333','birth':'1118'}
>>> a.items()
dict_items([('name','pey'),('phone','0119993333'),('birth','1118')])

>>> for k in a.items():
...    print(k)
...
('name','pey')
('phone','0119993333')
('birth','1118')
# tuple이다.

>>> list(a.items())[0][1]
'pey'

딕셔너리에서 값 추출하기
>>> a = {'A':90,'B':80,'C':70}
>>> a
{'A':90,'B':80,'C':70}
>>> a.pop('B')	# 'B' 항목의 value를 반환하고 삭제한다.
80
>>> a
{'A':90,'C':70}

딕셔너리의 모든 요소 지우기
>>> a = {'A':90,'B':80,'C':70}
>>> a.clear()
>>> a
{}	# 빈 딕셔너리가 된다.

key로 value 얻기
>>> a = {'name':'pey','phone':'0119993333','birth':'1118'}
>>> a.get('name')
'pey'
# a['name']과 a.get('name')의 다른점은 아래와 같다.
# 해당 key가 없을시 a['name']은 오류를 발생시키고
# a.get('name')은 None을 반환한다. 그리고 get()은
# 딕셔너리에 해당 key가 없을 경우 미리 정해둔 디폴트 값을 
# 대신 가져오게 할 수 있다.
>>> a.get('foo','bar')
'bar'	# 딕셔너리에 'foo'라는 key가 없으므로 'bar'가 반환되었다.

해당 key가 딕셔너리 안에 있는지 조사하기
>>> a = {'name':'pey','phone':'0119993333','birth':'1118'}
>>> 'name' in a
True
>>> 'email' in a
False
